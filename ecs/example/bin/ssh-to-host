#!/usr/bin/env bash

# Connects to the host created by the example using SSH proxied through SSM.
#
# Requires:
# - aws cli https://docs.aws.amazon.com/cli/latest/userguide/install-cliv1.html
# - aws cli session manager plugin https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html
# - openssh
#
# Based on https://github.com/elpy1/ssh-over-ssm/blob/master/ssh-ssm.sh
#
# Usage:
# bin/ssh-to-host

set -euo pipefail

ssh_key_path=$(mktemp)
ssh_pub_key_path="$ssh_key_path.pub"

function cleanup {
  echo >&2 "Removing key $ssh_key_path..."
  rm -f "$ssh_key_path" "$ssh_pub_key_path"
}
trap cleanup EXIT

echo >&2 "Generating key $ssh_key_path..."
user_name=$(whoami)
user_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
now=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
rm "$ssh_key_path"
ssh-keygen -q -t ed25519 -N '' -f "$ssh_key_path" -C "$user_name@$user_ip $now"
ssh_pub_key=$(cat "$ssh_pub_key_path")

echo >&2 "Fetching instance id..."
host_id=$(
  aws ec2 describe-instances \
  --filters \
    Name=tag:aws:autoscaling:groupName,Values="$(terraform output hosts_id)" \
    Name=instance-state-name,Values=running \
  --output text \
  --query 'Reservations[0].Instances[0].InstanceId'
)
host_user=ec2-user
host_authorized_keys_path="/home/$host_user/.ssh/authorized_keys"

if [ "$host_id" = "None" ]; then
  echo >&2 "No running instances"
  exit 1
fi

echo >&2 "Sending the key to $host_id via SSM..."
aws ssm send-command >/dev/null \
  --instance-ids "$host_id" \
  --document-name AWS-RunShellScript \
  --parameters commands="\"
    printf '$ssh_pub_key' | tee -a '$host_authorized_keys_path' && sleep 5
    sed -i s,'$ssh_pub_key',, '$host_authorized_keys_path'
    \"" \
  --comment "temporary ssm ssh access"

echo >&2 "SSHing to $host_user@$host_id via SSM..."
ssh \
  -F /dev/null \
  -i "$ssh_key_path" \
  -o "proxycommand aws ssm start-session --document-name AWS-StartSSHSession --target $host_id" \
  "$host_user@$host_id"
